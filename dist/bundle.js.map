{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://card_game/./script.js"],"sourcesContent":["const btnStart = document.querySelector(\".btn__start\");\r\nconst fieldControls = document.querySelectorAll(\".field__control\");\r\nlet game_level = [];\r\nconst gameSection = document.querySelector(\".game-section_container\");\r\nconst gameTable = document.createElement(\"div\"); // тут будет стол с игрой\r\n\r\nconst restartBtn = document.createElement(\"div\");\r\nconst hidden = document.querySelector(\".hide\");\r\nconst container = document.querySelector(\".container\").classList;\r\nconst cardField = document.querySelector(\".game-section_container\").classList;\r\n\r\nlet cards = [];\r\n\r\n// сохранение уровня сложности в глоб сост\r\nfor (let i = 0; i < fieldControls.length; i++) {\r\n  fieldControls[i].addEventListener(\"click\", () => {\r\n    console.log(`${fieldControls[i].name}: ${fieldControls[i].value}`);\r\n    localStorage.setItem(\"level\", fieldControls[i].value);\r\n    game_level = localStorage.level;\r\n  });\r\n}\r\n\r\nbtnStart.addEventListener(\"click\", () => startGame(game_level));\r\n// Запуск игры и выбор сложности принимает изначальную сложность игры\r\nconst startGame = (game_level) => {\r\n  let firstCard = null;\r\n  let secondCard = null;\r\n  let clickable = true;\r\n\r\n  container.toggle(\"cardsField\");\r\n  cardField.toggle(\"cardsField\");\r\n\r\n  const cardsIcons = createIconsArray(game_level);\r\n  const duplicatedCardsIcons = duplicateArray(cardsIcons);\r\n\r\n  shuffle(duplicatedCardsIcons);\r\n\r\n  duplicatedCardsIcons.forEach(\r\n    (icon) => gameTable.append(createGameCard(\"notFlippedCard\", icon))\r\n    // ); //изменить notFlippedCard\r\n  );\r\n\r\n  gameSection.append(gameTable, restartBtn);\r\n\r\n  cards.forEach((card, index) => card.addEventListener(\"click\", () => {}));\r\n\r\n  function get_elapsed_time_string(total_seconds) {\r\n    function pretty_time_string(num) {\r\n      return (num < 10 ? \"0\" : \"\") + num;\r\n    }\r\n\r\n    let minutes = Math.floor(total_seconds / 60);\r\n    total_seconds = total_seconds % 60;\r\n\r\n    let seconds = Math.floor(total_seconds);\r\n\r\n    minutes = pretty_time_string(minutes);\r\n    seconds = pretty_time_string(seconds);\r\n\r\n    let currentTimeString = minutes + \":\" + seconds;\r\n    return currentTimeString;\r\n  }\r\n\r\n  let elapsed_seconds = 0;\r\n  setInterval(function () {\r\n    elapsed_seconds = elapsed_seconds + 1;\r\n    $(\".timer\").text(get_elapsed_time_string(elapsed_seconds));\r\n  }, 1000);\r\n\r\n  cards = document.querySelectorAll(\".game-card\");\r\n\r\n  cards.forEach((card, index) =>\r\n    card.addEventListener(\"click\", () => {\r\n      if (clickable === true && !card.classList.contains(\"successfully\")) {\r\n        card.classList.add(\"flip\");\r\n\r\n        if (firstCard === null) {\r\n          firstCard = index;\r\n        } else {\r\n          if (index != firstCard) {\r\n            secondCard = index;\r\n            clickable = false;\r\n          }\r\n        }\r\n        if (\r\n          firstCard != null &&\r\n          secondCard != null &&\r\n          firstCard != secondCard\r\n        ) {\r\n          if (\r\n            cards[firstCard].firstElementChild.className ===\r\n            cards[secondCard].firstElementChild.className\r\n          ) {\r\n            setTimeout(() => {\r\n              cards[firstCard].classList.add(\"successfully\");\r\n              cards[secondCard].classList.add(\"successfully\");\r\n\r\n              firstCard = null;\r\n              secondCard = null;\r\n              clickable = true;\r\n            }, 500);\r\n          } else {\r\n            setTimeout(() => {\r\n              cards[firstCard].classList.remove(\"flip\");\r\n              cards[secondCard].classList.remove(\"flip\");\r\n\r\n              firstCard = null;\r\n              secondCard = null;\r\n              clickable = true;\r\n            }, 500);\r\n          }\r\n        }\r\n      }\r\n    })\r\n  );\r\n};\r\n\r\n// Карточки для игры\r\n\r\nconst duplicateArray = (array) =>\r\n  array.reduce((res, current) => res.concat([current, current]), []);\r\n\r\nconst createIconsArray = (initialCount) => {\r\n  const cardsIcons = [\r\n    {\r\n      value: \"6\",\r\n      suit: \"peaks\",\r\n    },\r\n    {\r\n      value: \"7\",\r\n      suit: \"peaks\",\r\n    },\r\n    {\r\n      value: \"8\",\r\n      suit: \"peaks\",\r\n    },\r\n    {\r\n      value: \"9\",\r\n      suit: \"peaks\",\r\n    },\r\n    {\r\n      value: \"10\",\r\n      suit: \"peaks\",\r\n    },\r\n    {\r\n      value: \"Q\",\r\n      suit: \"peaks\",\r\n    },\r\n    {\r\n      value: \"K\",\r\n      suit: \"peaks\",\r\n    },\r\n    {\r\n      value: \"J\",\r\n      suit: \"peaks\",\r\n    },\r\n    {\r\n      value: \"A\",\r\n      suit: \"peaks\",\r\n    },\r\n    {\r\n      value: \"6\",\r\n      suit: \"tambourine\",\r\n    },\r\n    {\r\n      value: \"7\",\r\n      suit: \"tambourine\",\r\n    },\r\n    {\r\n      value: \"8\",\r\n      suit: \"tambourine\",\r\n    },\r\n    {\r\n      value: \"9\",\r\n      suit: \"tambourine\",\r\n    },\r\n    {\r\n      value: \"10\",\r\n      suit: \"tambourine\",\r\n    },\r\n    {\r\n      value: \"Q\",\r\n      suit: \"tambourine\",\r\n    },\r\n    {\r\n      value: \"K\",\r\n      suit: \"tambourine\",\r\n    },\r\n    {\r\n      value: \"J\",\r\n      suit: \"tambourine\",\r\n    },\r\n    {\r\n      value: \"A\",\r\n      suit: \"tambourine\",\r\n    },\r\n    {\r\n      value: \"6\",\r\n      suit: \"cross\",\r\n    },\r\n    {\r\n      value: \"7\",\r\n      suit: \"cross\",\r\n    },\r\n    {\r\n      value: \"8\",\r\n      suit: \"cross\",\r\n    },\r\n    {\r\n      value: \"9\",\r\n      suit: \"cross\",\r\n    },\r\n    {\r\n      value: \"10\",\r\n      suit: \"cross\",\r\n    },\r\n    {\r\n      value: \"Q\",\r\n      suit: \"cross\",\r\n    },\r\n    {\r\n      value: \"K\",\r\n      suit: \"cross\",\r\n    },\r\n    {\r\n      value: \"J\",\r\n      suit: \"cross\",\r\n    },\r\n    {\r\n      value: \"A\",\r\n      suit: \"cross\",\r\n    },\r\n    {\r\n      value: \"6\",\r\n      suit: \"hearts\",\r\n    },\r\n    {\r\n      value: \"7\",\r\n      suit: \"hearts\",\r\n    },\r\n    {\r\n      value: \"8\",\r\n      suit: \"hearts\",\r\n    },\r\n    {\r\n      value: \"9\",\r\n      suit: \"hearts\",\r\n    },\r\n    {\r\n      value: \"10\",\r\n      suit: \"hearts\",\r\n    },\r\n    {\r\n      value: \"Q\",\r\n      suit: \"hearts\",\r\n    },\r\n    {\r\n      value: \"K\",\r\n      suit: \"hearts\",\r\n    },\r\n    {\r\n      value: \"J\",\r\n      suit: \"hearts\",\r\n    },\r\n    {\r\n      value: \"A\",\r\n      suit: \"hearts\",\r\n    },\r\n  ];\r\n\r\n  switch (initialCount) {\r\n    case \"6\":\r\n      shuffle(cardsIcons);\r\n      return cardsIcons.slice(0, 3);\r\n\r\n    case \"12\":\r\n      shuffle(cardsIcons);\r\n      return cardsIcons.slice(0, 6);\r\n\r\n    case \"18\":\r\n      shuffle(cardsIcons);\r\n      return cardsIcons.slice(0, 9);\r\n\r\n    default:\r\n      break;\r\n  }\r\n};\r\n\r\n// Перемешиваем карты\r\n\r\nconst shuffle = (array) => {\r\n  let currentIndex = array.length,\r\n    randomIndex;\r\n\r\n  while (currentIndex != 0) {\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex--;\r\n\r\n    [array[currentIndex], array[randomIndex]] = [\r\n      array[randomIndex],\r\n      array[currentIndex],\r\n    ];\r\n  }\r\n\r\n  return array;\r\n};\r\n\r\n//Создание карт\r\n\r\nconst createGameCard = (defaultIcon, flippedCardIcon) => {\r\n  const card = document.createElement(\"div\");\r\n  card.classList.add(\"game-card\");\r\n\r\n  const notFlippedCardI = document.createElement(\"i\");\r\n  const flippedCardI = document.createElement(\"i\");\r\n\r\n  notFlippedCardI.classList.add(`notFlippedCard`);\r\n\r\n  flippedCardI.innerHTML = `${flippedCardIcon.value}`;\r\n\r\n  flippedCardI.classList.add(\r\n    `flippedCard`,\r\n    `${flippedCardIcon.suit}`,\r\n    `${flippedCardIcon.value}`\r\n  );\r\n\r\n  card.append(flippedCardI, notFlippedCardI);\r\n\r\n  return card;\r\n};\r\n\r\n// duplicatedCardsIcons.forEach(icon => gameTable.append(createGameCard ('game-card', icon)));\r\n\r\ngameSection.append(gameTable, restartBtn);\r\n"],"names":["btnStart","document","querySelector","fieldControls","querySelectorAll","game_level","gameSection","gameTable","createElement","restartBtn","container","classList","cardField","cards","i","length","addEventListener","console","log","name","value","localStorage","setItem","level","startGame","firstCard","secondCard","clickable","toggle","cardsIcons","createIconsArray","duplicatedCardsIcons","duplicateArray","shuffle","forEach","icon","append","createGameCard","card","index","elapsed_seconds","setInterval","$","text","total_seconds","pretty_time_string","num","minutes","Math","floor","seconds","get_elapsed_time_string","contains","add","firstElementChild","className","setTimeout","remove","array","reduce","res","current","concat","initialCount","suit","slice","randomIndex","currentIndex","random","defaultIcon","flippedCardIcon","notFlippedCardI","flippedCardI","innerHTML"],"sourceRoot":""}
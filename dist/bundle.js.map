{"version":3,"file":"bundle.js","mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,0BAA0B;AAC1C;AACA,mBAAmB,sBAAsB,IAAI,uBAAuB;AACpaAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACfsBAAsB;AACpD;AACA;AACA,OAAO,qBAAqB;AAC5B,OAAO,sBAAsB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC","sources":["webpack://card_game/./script.js"],"sourcesContent":["const btnStart = document.querySelector('.btn-start');\r\nconst fieldControls = document.querySelectorAll('.field-control');\r\nconst formFields = document.querySelectorAll('.form__field');\r\nlet gameLevel = [];\r\nconst gameSection = document.querySelector('.game-section-container');\r\nconst gameTable = document.createElement('div'); // тут будет стол с игрой\r\nconst restartBtn = document.querySelector('.restart-btn');\r\nconst container = document.querySelector('.container').classList;\r\nconst cardField = document.querySelector('.game-section-container').classList;\r\n\r\nlet cards = [];\r\nconst winScreen = document.querySelector('.result-screen-win-container');\r\nconst lostScreen = document.querySelector('.result-screen-lost-container');\r\n\r\n// сохранение уровня сложности в глоб сост\r\nfor (let i = 0; i < fieldControls.length; i++) {\r\n  fieldControls[i].addEventListener('click', () => {\r\n    console.log(`${fieldControls[i].name}: ${fieldControls[i].value}`);\r\n    localStorage.setItem('level', fieldControls[i].value);\r\n    gameLevel = localStorage.level;\r\n  });\r\n}\r\nformFields.forEach((field) => {\r\n  field.addEventListener('click', () => {\r\n    formFields.forEach((item) => item.classList.remove('active'));\r\n    field.classList.add('active');\r\n  });\r\n});\r\n\r\nbtnStart.addEventListener('click', () => startGame(gameLevel));\r\n\r\n// Запуск игры и выбор сложности принимает изначальную сложность игры\r\nconst startGame = (gameLevel) => {\r\n  let firstCard = null;\r\n  let secondCard = null;\r\n  let clickable = true;\r\n\r\n  container.toggle('cards-field');\r\n  cardField.toggle('cards-field');\r\n\r\n  const cardsIcons = createIconsArray(gameLevel);\r\n  const duplicatedCardsIcons = duplicateArray(cardsIcons);\r\n\r\n  shuffle(duplicatedCardsIcons);\r\n\r\n  duplicatedCardsIcons.forEach((icon) =>\r\n    gameTable.append(createGameCard('notFlippedCard', icon))\r\n  );\r\n\r\n  gameSection.append(gameTable, restartBtn);\r\n\r\n  function getElapsedTimeString(totalSeconds) {\r\n    function prettyTimeString(num) {\r\n      return (num < 10 ? '0' : '') + num;\r\n    }\r\n\r\n    let minutes = Math.floor(totalSeconds / 60);\r\n    totalSeconds = totalSeconds % 60;\r\n\r\n    let seconds = Math.floor(totalSeconds);\r\n\r\n    minutes = prettyTimeString(minutes);\r\n    seconds = prettyTimeString(seconds);\r\n\r\n    const currentTimeString = minutes + ':' + seconds;\r\n    return currentTimeString;\r\n  }\r\n\r\n  let elapsedSeconds = -5;\r\n\r\n  function setTimer() {\r\n    setTimeout(function () {\r\n      // $('.timer').text(getElapsedTimeString(elapsedSeconds));\r\n      document.querySelector('.timer').innerHTML =\r\n        getElapsedTimeString(elapsedSeconds);\r\n    }, 5000);\r\n  }\r\n  setInterval(function () {\r\n    setTimer(elapsedSeconds++);\r\n  }, 1000);\r\n\r\n  cards = document.querySelectorAll('.game-card');\r\n\r\n  const karty = document.querySelectorAll('.game-card');\r\n  karty.forEach((karta) => karta.classList.add('flip'));\r\n  karty.forEach((karta) =>\r\n    setTimeout(() => {\r\n      karta.classList.remove('flip');\r\n    }, 5000)\r\n  );\r\n\r\n  cards.forEach((card, index) =>\r\n    card.addEventListener('click', () => {\r\n      if (clickable === true && !card.classList.contains('successfully')) {\r\n        card.classList.add('flip');\r\n        if (firstCard === null) {\r\n          firstCard = index;\r\n        } else {\r\n          if (index !== firstCard) {\r\n            secondCard = index;\r\n            clickable = false;\r\n          }\r\n        }\r\n        if (\r\n          firstCard !== null &&\r\n          secondCard !== null &&\r\n          firstCard !== secondCard\r\n        ) {\r\n          if (\r\n            cards[firstCard].firstElementChild.className ===\r\n            cards[secondCard].firstElementChild.className\r\n          ) {\r\n            setTimeout(() => {\r\n              cards[firstCard].classList.add('successfully');\r\n              cards[secondCard].classList.add('successfully');\r\n\r\n              firstCard = null;\r\n              secondCard = null;\r\n              clickable = true;\r\n            }, 500);\r\n\r\n            if (\r\n              Array.from(cards).every((card) => card.className.includes('flip'))\r\n            ) {\r\n              gameSection.remove(gameTable);\r\n              winScreen.style.display = 'inherit';\r\n              setTimeout(() => {\r\n                document\r\n                  .querySelectorAll('.timer')[0]\r\n                  .classList.remove('timer');\r\n              }, 500);\r\n            }\r\n          } else {\r\n            if (\r\n              !Array.from(cards).every((card) =>\r\n                card.className.includes('flip')\r\n              )\r\n            ) {\r\n              gameSection.remove(gameTable);\r\n              lostScreen.style.display = 'inherit';\r\n              setTimeout(() => {\r\n                document\r\n                  .querySelectorAll('.timer')[1]\r\n                  .classList.remove('timer');\r\n              }, 500);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n  );\r\n};\r\n\r\n// Карточки для игры\r\n\r\nconst duplicateArray = (array) =>\r\n  array.reduce((res, current) => res.concat([current, current]), []);\r\n\r\nconst createIconsArray = (initialCount) => {\r\n  const cardsIcons = [\r\n    {\r\n      value: '6',\r\n      suit: 'peaks',\r\n    },\r\n    {\r\n      value: '7',\r\n      suit: 'peaks',\r\n    },\r\n    {\r\n      value: '8',\r\n      suit: 'peaks',\r\n    },\r\n    {\r\n      value: '9',\r\n      suit: 'peaks',\r\n    },\r\n    {\r\n      value: '10',\r\n      suit: 'peaks',\r\n    },\r\n    {\r\n      value: 'Q',\r\n      suit: 'peaks',\r\n    },\r\n    {\r\n      value: 'K',\r\n      suit: 'peaks',\r\n    },\r\n    {\r\n      value: 'J',\r\n      suit: 'peaks',\r\n    },\r\n    {\r\n      value: 'A',\r\n      suit: 'peaks',\r\n    },\r\n    {\r\n      value: '6',\r\n      suit: 'tambourine',\r\n    },\r\n    {\r\n      value: '7',\r\n      suit: 'tambourine',\r\n    },\r\n    {\r\n      value: '8',\r\n      suit: 'tambourine',\r\n    },\r\n    {\r\n      value: '9',\r\n      suit: 'tambourine',\r\n    },\r\n    {\r\n      value: '10',\r\n      suit: 'tambourine',\r\n    },\r\n    {\r\n      value: 'Q',\r\n      suit: 'tambourine',\r\n    },\r\n    {\r\n      value: 'K',\r\n      suit: 'tambourine',\r\n    },\r\n    {\r\n      value: 'J',\r\n      suit: 'tambourine',\r\n    },\r\n    {\r\n      value: 'A',\r\n      suit: 'tambourine',\r\n    },\r\n    {\r\n      value: '6',\r\n      suit: 'cross',\r\n    },\r\n    {\r\n      value: '7',\r\n      suit: 'cross',\r\n    },\r\n    {\r\n      value: '8',\r\n      suit: 'cross',\r\n    },\r\n    {\r\n      value: '9',\r\n      suit: 'cross',\r\n    },\r\n    {\r\n      value: '10',\r\n      suit: 'cross',\r\n    },\r\n    {\r\n      value: 'Q',\r\n      suit: 'cross',\r\n    },\r\n    {\r\n      value: 'K',\r\n      suit: 'cross',\r\n    },\r\n    {\r\n      value: 'J',\r\n      suit: 'cross',\r\n    },\r\n    {\r\n      value: 'A',\r\n      suit: 'cross',\r\n    },\r\n    {\r\n      value: '6',\r\n      suit: 'hearts',\r\n    },\r\n    {\r\n      value: '7',\r\n      suit: 'hearts',\r\n    },\r\n    {\r\n      value: '8',\r\n      suit: 'hearts',\r\n    },\r\n    {\r\n      value: '9',\r\n      suit: 'hearts',\r\n    },\r\n    {\r\n      value: '10',\r\n      suit: 'hearts',\r\n    },\r\n    {\r\n      value: 'Q',\r\n      suit: 'hearts',\r\n    },\r\n    {\r\n      value: 'K',\r\n      suit: 'hearts',\r\n    },\r\n    {\r\n      value: 'J',\r\n      suit: 'hearts',\r\n    },\r\n    {\r\n      value: 'A',\r\n      suit: 'hearts',\r\n    },\r\n  ];\r\n\r\n  switch (initialCount) {\r\n    case '6':\r\n      shuffle(cardsIcons);\r\n      return cardsIcons.slice(0, 3);\r\n\r\n    case '12':\r\n      shuffle(cardsIcons);\r\n      return cardsIcons.slice(0, 6);\r\n\r\n    case '18':\r\n      shuffle(cardsIcons);\r\n      return cardsIcons.slice(0, 9);\r\n\r\n    default:\r\n      break;\r\n  }\r\n};\r\n\r\n// Перемешиваем карты\r\n\r\nconst shuffle = (array) => {\r\n  let currentIndex = array.length,\r\n    randomIndex;\r\n\r\n  while (currentIndex !== 0) {\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex--;\r\n\r\n    [array[currentIndex], array[randomIndex]] = [\r\n      array[randomIndex],\r\n      array[currentIndex],\r\n    ];\r\n  }\r\n\r\n  return array;\r\n};\r\n\r\n//Создание карт\r\n\r\nconst createGameCard = (defaultIcon, flippedCardIcon) => {\r\n  const card = document.createElement('div');\r\n  card.classList.add('game-card');\r\n\r\n  const notFlippedCardI = document.createElement('i');\r\n  const flippedCardI = document.createElement('i');\r\n\r\n  notFlippedCardI.classList.add(`not-flipped-card`);\r\n  flippedCardI.innerHTML = `${flippedCardIcon.value}`;\r\n  flippedCardI.classList.add(\r\n    `flipped-card`,\r\n    `${flippedCardIcon.suit}`,\r\n    `${flippedCardIcon.value}`\r\n  );\r\n\r\n  card.append(flippedCardI, notFlippedCardI);\r\n\r\n  return card;\r\n};\r\n\r\ngameSection.append(gameTable, restartBtn);\r\n\r\ndocument.querySelectorAll('.restart-btn').forEach((button) => {\r\n  button.addEventListener('click', () => window.location.reload());\r\n});\r\n"],"names":[],"sourceRoot":""}